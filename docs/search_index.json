[["index.html", "R Course Chapter 1 Introduction to R and Basic Programming Concepts 1.1 Overview of R Programming 1.2 Introduction to the R ecosystem 1.3 Setting Up R Environment 1.4 Hands-on Exercise", " R Course YOUR NAME HERE 2024-08-17 Chapter 1 Introduction to R and Basic Programming Concepts 1.1 Overview of R Programming 1.1.1 Introduction to R R is a programming language particularly designed for statistics and data analysis. It was invented the statisticians Robert Gentleman and Ross Ihaka in 1990 and now its the one of the most widely used in data science community. The language is open-source, this has allowed extensive customization and adaptability for research and data analysis. Here are some of the Key features of R; Statistical Computing: R has various tools specifically for statistics like time-series, clustering, classification ,and linear and non-linear models. Data Wrangling and Analysis: R has extensive libraries like dplyr and ggplot for data manipulation and visualizations respectively. Users are able to clean, transform and present the data inform of charts in a meaningful way for better insights with the help of these libraries. Reproducibility: R language allows reproducible research such that the code and the results can be stored inform of scripts, markdown, notebooks and bookdown. Work done in R can be easily shared and reviewed enabling easy collaboration and transparency in work. Comprehensive Ecosystem: R has the CRAN(Comprehensive R Archive Network) that hosts numerous packages for different tasks like machine learning, data visualization, finances, bioinformatics and more. Versatility: R can be used with other tools like other programming languages, for instance Python, SQL etc. This allows seamless integration in the wide range of data ecosystems. 1.1.2 Importance of R in Data Analysis This are some of the features that sets R apart in the data community; Large Community and Support: There is a large online community for data scientist and other researchers who use R. The community has contributed to the development of various packages , continuous improvements, support and extensive documentation. This has made it possible and easy for new users and experienced users to find solution for the complex tasks. Versatility: Data Analysis in R is applicable in various industries like health, finance, government and academia. This allows it to handle diverse data types and analysis needs. Specialization on Statistical Analysis: Most programming languages were designed to be general purpose but R was designed specifically for statistics. This ensures its users have access to the most relevant and important tools in the data analysis tasks. Advanced Visualization: R has one of the best visualization capabilities like dashboards apps, interactive charts. Also, it can be used to generate the most aesthetically pleasing chart crucial for effective communication and decision making. 1.1.3 Application of R in Various Industries R is widely applicable in various industries due to its robust statistical capabilities, open source nature and the extensive library how is important in different industries; R is the go-to tool in the field of academia and research especially in data analysis, social and environmental science research(psychology, economics and climate change), reproducible research and statistical research. In the Manufacturing industries, R can be used to optimize operations like supply chain, quality control and cost reduction. The Governments can use R for data driven research like demographics, economic policy analysis, health and social policy.Forecasts can be made using R that will enable the research. The finance and banking industries use R for complex tasks like algorithmic trading, portfolio optimization, credit scoring and risk management. R is applicable is essential in the health industry in areas like clinical trials and bioinformatics, tracking the spread of diseases(epidemiology) and help in health policy making. R is also applicable in many other industries like marketing, sports and entertainment to name but a few. As industries continue to embrace data-driven strategies, R’s role in analytics and decision-making will only continue to grow. 1.2 Introduction to the R ecosystem 1.2.1 R Studio Rstudio is an integrated development environment(IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution as well as tools for plotting history, debugging and work space management. R studio is an open source software from posit and can be freely be downloaded from https://posit.co/download/rstudio-desktop/. This link has all the installation files for Mac, Linux and Windows. You will download the installation file and install based on your computer operating system. 1.2.2 CRAN 1.3 Setting Up R Environment 1.3.1 Installation of R and RStudio Step-by-step guide to downloading and installing R and RStudio on participants’ computers. Overview of the installation process on different operating systems (Windows, macOS, Linux). 1.3.2 Introduction to RStudio Interface The image above is for R code in R Studio. Each quadrant has its own function. text editor: serves as the primary interface for writing and editing R scripts, Markdown documents, and other text-based files stand input/output (console/terminal/jobs): It is the bottom left quadrant in R Studio that serves as a command-line interface where you can directly interact with R such as code execution and output display. all data and its properties quadrants: It is the top right quadrant in Rstudio that is typically the “Environment” pane, which provides information and tools for managing your R environment such as data importation, display of variables. plots and file directory structure: The bottom right quadrant in RStudio typically houses the “Files”, “Plots”, “Packages”, “Help”, and “Viewer” tabs. 1.3.3 Basic R Syntax and Commands R syntax has specific rules that govern how code is written in R. Understanding these concepts makes a programmer to write clear and error-free code. These are some of the syntax rules that govern how code is written in R. Case sensitivity The R syntax distinguishes between the uppercase letter and the lowercase letter. A variable written in uppercase is different as the variable written in lowercase even the words mean the same. For instance let’s take the variable “age” and store it 15, and another variable “AGE” and store it 27 and see their outputs. # Different variables due to case sensitivity age &lt;- 15 AGE &lt;- 27 print(age) # Outputs: 15 ## [1] 15 print(AGE) # Outputs: 27 ## [1] 27 You can see that above here the variable age and AGE are treated as different. Assignment Operators R has several different methods to assign a value to a variable. They include; Equal Sign(‘=’): This assignment operator is always used when assigning the function arguments but can used in general assignments. age = 21 #variable `age` is assigned to 21 ii. **Left Arrow(&#39;&lt;-&#39;)**: This is the common type of assignment operator. The direction of the arrow points to the variable age &lt;- 10 # variable &#39;age&#39; assigned to 10 iii. **Right Arrow(&#39;-&gt;&#39;)**: This is just like the right arrow operator however the direction of the arrow is reversed. The arrow should still point to the direction of the variable. 27 -&gt; age # arrow points to the direction of the variable, age Use of symbols The R language has several symbols that have specific meaning important when writing code. The Hash(‘#’): Is used for comments. R ignores any text that follows # in the same line # This is a comment Dollar Sign (’$`): Used to access elements of a list or column values in a data frame df &lt;- data.frame(a = 1:3, b = 4:6) df$a # Accesses column &#39;a&#39; in the data frame ## [1] 1 2 3 Square brackets ([]): They are used for indexing vectors, lists, matrices and data frames v &lt;- c(10, 20, 30) v[3] # Accesses the third element (20) ## [1] 30 Curly braces ({}): Used to group multiple expressions, for instance in loops and conditional statements. In this case we will use a if else conditional statement to show how curly braces are used x &lt;- 2 if (x &gt; 0) { print(&quot;Positive number&quot;) } ## [1] &quot;Positive number&quot; Left arrow (‘&lt;-’) and the right arrow (‘-&gt;’): As mentioned earlier, these are assignment operators Brackets ‘()’: Used for function calls and grouping expressions sum(1, 2, 3) ## [1] 6 There are more symbols used in R especially in mathematical operators and advanced concepts that will be later introduced in the course. Reserved Words R has set of reserved words that have special meaning like identifiers and function names. These words cannot be used as variable names. if, else, repeat, while, function, TRUE, FALSE, NA and NULL are just but a few examples of reserved words. Whitespace R generally ignores whitespace (spaces, tabs, newlines) between elements, except within character strings or where it would change the meaning of the code. Proper use of whitespace improves code readability. x &lt;- 5 + 3 # Valid y &lt;-5+3 # Also valid, but less readable 1.4 Hands-on Exercise "],["basic-data-types-and-structures.html", "Chapter 2 Basic Data Types and Structures", " Chapter 2 Basic Data Types and Structures "],["data-importing-and-exporting.html", "Chapter 3 Data Importing and Exporting", " Chapter 3 Data Importing and Exporting "],["data-manipulation.html", "Chapter 4 Data Manipulation 4.1 Basic Data Manipulation 4.2 Data Manipulation with Dplyr", " Chapter 4 Data Manipulation 4.1 Basic Data Manipulation Sorting Data: Explanation of sorting data in R using order() and sort() functions. Demonstration of sorting data frames by one or more columns. Basic Data Cleaning Techniques: Overview of common data cleaning tasks (e.g., handling missing data, removing duplicates). Demonstration of how to detect and manage missing values using is.na() and na.omit() functions. 4.1.1 Introduction to Data Manipulation Data Manipulation is the adjusting, organizing and transforming of the raw data is not a more useful and suitable format for data analysis. These are some of the reasons that make data manipulation mandatory in the data analysis process; Improves the data quality Raw data may be incomplete, messy, containing irrelevant information, errors ,or duplicates that need to be cleaned and rectified. This will ensure the data is reliable thereby preventing incorrect conclusions or decisions. Making Data Usable Sometimes data is collected from different sources that is not ready for analysis. Data Manipulation will transform the data into a structured and consistent format for easy analysis. Enhancing Data Exploration By cleaning the data, analysts explore the data thereby understanding different concepts of the data. Enabling Complex Analysis Some types of analysis require data to be in specific format or structure, for instance the time series analysis require data to be sorted out by date. Supporting Decision Making Data Manipulation ensures that the data that is fed into the system is timely, accurate and reliable for informed decision-making models and relevant reports These are the key tasks in the data manipulation; Cleaning: by removing inaccurate and incomplete data entries. Filtering the data by selecting certain rows or columns based on a certain criteria. Reshaping: Changing the structure of the data for instance pivoting. Merging: Combine multiple data sets into one. Transforming: Modify existing data by mathematical or logical operations. Aggregation: Summarizing the data by performing operations like sum,average and count. 4.1.2 Subsetting and Filtering Data: Subsetting is a data management strategy that involves creating a coherent slice data from different data set for specific use cases. This topic will better be explained practically, therefore we will use the titanic data set. The data set contains information about the passengers on the Titanic, including their age, gender, passenger class, whether they survived and other details. Since the titanic dataset is absent in baseR, the titanic library will be installed by; install.packages(&quot;titanic&quot;) load the library library(&quot;titanic&quot;) The data set will indexed using different indexing techniques such as indexing of a single element, row and column indexing. First we load the data set and view the first few records before indexing data(&quot;titanic_train&quot;) titanic &lt;- titanic_train head(titanic) # view the first few rows of the titanic data set ## PassengerId Survived Pclass ## 1 1 0 3 ## 2 2 1 1 ## 3 3 1 3 ## 4 4 1 1 ## 5 5 0 3 ## 6 6 0 3 ## Name Sex Age SibSp Parch ## 1 Braund, Mr. Owen Harris male 22 1 0 ## 2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female 38 1 0 ## 3 Heikkinen, Miss. Laina female 26 0 0 ## 4 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35 1 0 ## 5 Allen, Mr. William Henry male 35 0 0 ## 6 Moran, Mr. James male NA 0 0 ## Ticket Fare Cabin Embarked ## 1 A/5 21171 7.2500 S ## 2 PC 17599 71.2833 C85 C ## 3 STON/O2. 3101282 7.9250 S ## 4 113803 53.1000 C123 S ## 5 373450 8.0500 S ## 6 330877 8.4583 Q Extract a row When subsetting to extract data for a single row the square brackets [ ] will be used with the position of the index you want to extract. Lets extract all the information of the 10th passenger. titanic[10, ] # note the comma after the index 10 ## PassengerId Survived Pclass Name Sex Age ## 10 10 1 2 Nasser, Mrs. Nicholas (Adele Achem) female 14 ## SibSp Parch Ticket Fare Cabin Embarked ## 10 1 0 237736 30.0708 C Also, more indices can be subsetted in the format [i:j, ] where the i is the starting index while j is the ending index respectively. Lets extract the information by subsetting the titanic data from index 7 to 10. titanic[7:10, ] ## PassengerId Survived Pclass ## 7 7 0 1 ## 8 8 0 3 ## 9 9 1 3 ## 10 10 1 2 ## Name Sex Age SibSp Parch ## 7 McCarthy, Mr. Timothy J male 54 0 0 ## 8 Palsson, Master. Gosta Leonard male 2 3 1 ## 9 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) female 27 0 2 ## 10 Nasser, Mrs. Nicholas (Adele Achem) female 14 1 0 ## Ticket Fare Cabin Embarked ## 7 17463 51.8625 E46 S ## 8 349909 21.0750 S ## 9 347742 11.1333 S ## 10 237736 30.0708 C Extract a column When subsetting to extract data for a single column the square brackets [ ] will be used as before, with the position of the index or column name you want to extract. Lets extract all the information of the column Name. titanic[, &quot;Name&quot;] # note the comma before &quot;Name&quot; An index of the column can be used in place of the column name. For instance, the column, “PassengerId” is the first column therefore its index will be 1. Lets subset the column by calling the index. titanic[, 1] # note the comma before the column index Extracting a single element A single element that has a defined position in a data frame, both the row index and the column name/index are called. dataframe[row_index, column index/name] Lets extract the age of the Name of the fifth passenger. titanic[5, &quot;Name&quot;] ## [1] &quot;Allen, Mr. William Henry&quot; Instead of using the column name. Lets use the column index. In the above context, the column “Name” appears at index(is the fourth column). titanic[5, 4] ## [1] &quot;Allen, Mr. William Henry&quot; Subsetting a data set can be done by filtering data based on logical conditions to extract rows that meet certain criteria. They involve comparisons operators such as &gt;, &lt;, ==, != or logical operators like &amp;(and), |(or), ! (not). In this titanic data set we:- Filter based on a single condition Lets find the passengers who survived on the titanic. survivors &lt;- titanic[titanic$Survived == 1, ] head(survivors) # view the first few rows of survivors ## PassengerId Survived Pclass ## 2 2 1 1 ## 3 3 1 3 ## 4 4 1 1 ## 9 9 1 3 ## 10 10 1 2 ## 11 11 1 3 ## Name Sex Age SibSp Parch ## 2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female 38 1 0 ## 3 Heikkinen, Miss. Laina female 26 0 0 ## 4 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35 1 0 ## 9 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) female 27 0 2 ## 10 Nasser, Mrs. Nicholas (Adele Achem) female 14 1 0 ## 11 Sandstrom, Miss. Marguerite Rut female 4 1 1 ## Ticket Fare Cabin Embarked ## 2 PC 17599 71.2833 C85 C ## 3 STON/O2. 3101282 7.9250 S ## 4 113803 53.1000 C123 S ## 9 347742 11.1333 S ## 10 237736 30.0708 C ## 11 PP 9549 16.7000 G6 S The above data set consists of titanic passengers who survived. Who were the passengers who boarded the first class on the Titan? first_class_passengers &lt;- titanic[titanic$Pclass == 1, ] head(first_class_passengers) ## PassengerId Survived Pclass ## 2 2 1 1 ## 4 4 1 1 ## 7 7 0 1 ## 12 12 1 1 ## 24 24 1 1 ## 28 28 0 1 ## Name Sex Age SibSp Parch ## 2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female 38 1 0 ## 4 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35 1 0 ## 7 McCarthy, Mr. Timothy J male 54 0 0 ## 12 Bonnell, Miss. Elizabeth female 58 0 0 ## 24 Sloper, Mr. William Thompson male 28 0 0 ## 28 Fortune, Mr. Charles Alexander male 19 3 2 ## Ticket Fare Cabin Embarked ## 2 PC 17599 71.2833 C85 C ## 4 113803 53.1000 C123 S ## 7 17463 51.8625 E46 S ## 12 113783 26.5500 C103 S ## 24 113788 35.5000 A6 S ## 28 19950 263.0000 C23 C25 C27 S The above examples, the extracted data set met a single condition. Filtering based on Multiple Conditions Data can be subsetted by filtering based on more than one condition. To demonstrate this, lets find the female passengers who survived. Here there are two conditions;- the passenger must be a female, the passenger must have survived. The resultant data set must meet the above conditions female_survivors &lt;- titanic[titanic$Sex == &quot;female&quot; &amp; titanic$Survived == 1, ] head(female_survivors) #view the first few rows ## PassengerId Survived Pclass ## 2 2 1 1 ## 3 3 1 3 ## 4 4 1 1 ## 9 9 1 3 ## 10 10 1 2 ## 11 11 1 3 ## Name Sex Age SibSp Parch ## 2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female 38 1 0 ## 3 Heikkinen, Miss. Laina female 26 0 0 ## 4 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35 1 0 ## 9 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) female 27 0 2 ## 10 Nasser, Mrs. Nicholas (Adele Achem) female 14 1 0 ## 11 Sandstrom, Miss. Marguerite Rut female 4 1 1 ## Ticket Fare Cabin Embarked ## 2 PC 17599 71.2833 C85 C ## 3 STON/O2. 3101282 7.9250 S ## 4 113803 53.1000 C123 S ## 9 347742 11.1333 S ## 10 237736 30.0708 C ## 11 PP 9549 16.7000 G6 S Lets also add one more condition, the female survivor must be under 18. minor_female_survivors &lt;- titanic[titanic$Sex == &quot;female&quot; &amp; titanic$Survived == 1 &amp; titanic$Age &lt; 18, ] # comma should be after the conditons head(minor_female_survivors) ## PassengerId Survived Pclass Name Sex Age ## 10 10 1 2 Nasser, Mrs. Nicholas (Adele Achem) female 14 ## 11 11 1 3 Sandstrom, Miss. Marguerite Rut female 4 ## NA NA NA NA &lt;NA&gt; &lt;NA&gt; NA ## 23 23 1 3 McGowan, Miss. Anna &quot;Annie&quot; female 15 ## NA.1 NA NA NA &lt;NA&gt; &lt;NA&gt; NA ## NA.2 NA NA NA &lt;NA&gt; &lt;NA&gt; NA ## SibSp Parch Ticket Fare Cabin Embarked ## 10 1 0 237736 30.0708 C ## 11 1 1 PP 9549 16.7000 G6 S ## NA NA NA &lt;NA&gt; NA &lt;NA&gt; &lt;NA&gt; ## 23 0 0 330923 8.0292 Q ## NA.1 NA NA &lt;NA&gt; NA &lt;NA&gt; &lt;NA&gt; ## NA.2 NA NA &lt;NA&gt; NA &lt;NA&gt; &lt;NA&gt; Filtering using Negation The != sign a logical operator that is used to negate a condition. Lets use it to find the passengers who did not survive. non_survivors &lt;- titanic[titanic$Survived != 1, ] tail(non_survivors) # view the last few records ## PassengerId Survived Pclass Name Sex ## 884 884 0 2 Banfield, Mr. Frederick James male ## 885 885 0 3 Sutehall, Mr. Henry Jr male ## 886 886 0 3 Rice, Mrs. William (Margaret Norton) female ## 887 887 0 2 Montvila, Rev. Juozas male ## 889 889 0 3 Johnston, Miss. Catherine Helen &quot;Carrie&quot; female ## 891 891 0 3 Dooley, Mr. Patrick male ## Age SibSp Parch Ticket Fare Cabin Embarked ## 884 28 0 0 C.A./SOTON 34068 10.500 S ## 885 25 0 0 SOTON/OQ 392076 7.050 S ## 886 39 0 5 382652 29.125 Q ## 887 27 0 0 211536 13.000 S ## 889 NA 1 2 W./C. 6607 23.450 S ## 891 32 0 0 370376 7.750 Q Alternatively you can use non_survivors &lt;- titanic[!titanic$Survived == 1, ] Also, lets find the passengers who were not in the third class not_third_class &lt;- titanic[titanic$Pclass != 3, ] head(not_third_class) ## PassengerId Survived Pclass ## 2 2 1 1 ## 4 4 1 1 ## 7 7 0 1 ## 10 10 1 2 ## 12 12 1 1 ## 16 16 1 2 ## Name Sex Age SibSp Parch ## 2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female 38 1 0 ## 4 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35 1 0 ## 7 McCarthy, Mr. Timothy J male 54 0 0 ## 10 Nasser, Mrs. Nicholas (Adele Achem) female 14 1 0 ## 12 Bonnell, Miss. Elizabeth female 58 0 0 ## 16 Hewlett, Mrs. (Mary D Kingcome) female 55 0 0 ## Ticket Fare Cabin Embarked ## 2 PC 17599 71.2833 C85 C ## 4 113803 53.1000 C123 S ## 7 17463 51.8625 E46 S ## 10 237736 30.0708 C ## 12 113783 26.5500 C103 S ## 16 248706 16.0000 S Alternatively not_third_class &lt;- titanic[!titanic$Pclass == 3, ] 4.1.3 Sorting Data Sorting is the ordering of elements in a data set (vectors, lists, matrix and data frames) based on a particular criteria. This is a fundamental operation data analysis, as it enables data organization in a meaningful way for easier visualization and interpretation. These are the several functions in Base R that are used in sorting;- sort() Lets create a vector v with five elements Sort the elements in a descending order v = c(43, 82, 11, 73, 34) # Create a vector v1 = sort(v, decreasing = TRUE) #sort the elements in a descending order v1 ## [1] 82 73 43 34 11 to order the same vector in an ascending order the decreasing argument is set to FALSE. v = c(43, 82, 11, 73, 34) # Create a vector v2 = sort(v, decreasing = FALSE) #sort the elements in an ascending order v2 ## [1] 11 34 43 73 82 Also character vectors can be sorted in alphabetical order for instance lets sort the the names, \"Alice\", \"Charlie\", \"Bob\" in the alphabetical order. names &lt;- c(&quot;Alice&quot;, &quot;Charlie&quot;, &quot;Bob&quot;) sorted_names &lt;- sort(names) sorted_names ## [1] &quot;Alice&quot; &quot;Bob&quot; &quot;Charlie&quot; Alternatively, the names can be ordered in the reverse alphabetical order when the decreasing argument is set to TRUE. names &lt;- c(&quot;Alice&quot;, &quot;Charlie&quot;, &quot;Bob&quot;, &quot;Zach&quot;) names_1 &lt;- sort(names, decreasing = TRUE) # order in reverse alphabetical order names_1 ## [1] &quot;Zach&quot; &quot;Charlie&quot; &quot;Bob&quot; &quot;Alice&quot; order() This function returns the indices that would sort the vectors. For instance lets sort the vector v = c(43, 82, 11, 73, 34) in an ascending order(from smallest to the largest). The smallest number in this case is 11, therefore, the order() function will return 1 while 82 is the largest(5th smallest) number in this case, it will be returned as 5. v = c(43, 82, 11, 73, 34) order(v, decreasing = FALSE) ## [1] 3 5 1 4 2 &lt;&lt;&lt;&lt;Add two more examples&gt;&gt;&gt;&gt; rank() Returns of the rank of the element in a vector, list. The smallest element is ranked as 1(in this case its 11) while largest element is ranked last(82 is ranked 5 here) v = c(43, 82, 11, 73, 34) rank(v, ties.method = &quot;average&quot;, na.last = TRUE) ## [1] 3 5 1 4 2 rev() This function simply reverse the order of elements. The first element in a vector will be last while the last one will be first. v = c(43, 82, 11, 73, 34) rev(v) ## [1] 34 73 11 82 43 Sorting Data Frames A data frame can be sorted in descending/ascending order of a certain column. For instance, we will sort the titanic data set in the order of age in ascending order. titanic_by_age &lt;- titanic[order(titanic$Age), ] head(titanic_by_age) ## PassengerId Survived Pclass Name Sex Age ## 804 804 1 3 Thomas, Master. Assad Alexander male 0.42 ## 756 756 1 2 Hamalainen, Master. Viljo male 0.67 ## 470 470 1 3 Baclini, Miss. Helene Barbara female 0.75 ## 645 645 1 3 Baclini, Miss. Eugenie female 0.75 ## 79 79 1 2 Caldwell, Master. Alden Gates male 0.83 ## 832 832 1 2 Richards, Master. George Sibley male 0.83 ## SibSp Parch Ticket Fare Cabin Embarked ## 804 0 1 2625 8.5167 C ## 756 1 1 250649 14.5000 S ## 470 2 1 2666 19.2583 C ## 645 2 1 2666 19.2583 C ## 79 0 2 248738 29.0000 S ## 832 1 1 29106 18.7500 S Sorting the titanic data by age in descending order, - will be added infront of argument titanic$Age to be -titanic$Age titanic_by_age &lt;- titanic[order(-titanic$Age), ] # note the - sign head(titanic_by_age) ## PassengerId Survived Pclass Name Sex Age ## 631 631 1 1 Barkworth, Mr. Algernon Henry Wilson male 80.0 ## 852 852 0 3 Svensson, Mr. Johan male 74.0 ## 97 97 0 1 Goldschmidt, Mr. George B male 71.0 ## 494 494 0 1 Artagaveytia, Mr. Ramon male 71.0 ## 117 117 0 3 Connors, Mr. Patrick male 70.5 ## 673 673 0 2 Mitchell, Mr. Henry Michael male 70.0 ## SibSp Parch Ticket Fare Cabin Embarked ## 631 0 0 27042 30.0000 A23 S ## 852 0 0 347060 7.7750 S ## 97 0 0 PC 17754 34.6542 A5 C ## 494 0 0 PC 17609 49.5042 C ## 117 0 0 370369 7.7500 Q ## 673 0 0 C.A. 24580 10.5000 S Also, dataframes can be sorted based by multiple columns. Lets sort the titanic data set by Passenger class (Pclass) in ascending order and by age in descending order at once. # Pclass in ascending order, Age in descending order titanic_sorted_by_class_and_age &lt;- titanic[order(titanic$Pclass, -titanic$Age), ] head(titanic_sorted_by_class_and_age) ## PassengerId Survived Pclass Name Sex Age ## 631 631 1 1 Barkworth, Mr. Algernon Henry Wilson male 80 ## 97 97 0 1 Goldschmidt, Mr. George B male 71 ## 494 494 0 1 Artagaveytia, Mr. Ramon male 71 ## 746 746 0 1 Crosby, Capt. Edward Gifford male 70 ## 55 55 0 1 Ostby, Mr. Engelhart Cornelius male 65 ## 457 457 0 1 Millet, Mr. Francis Davis male 65 ## SibSp Parch Ticket Fare Cabin Embarked ## 631 0 0 27042 30.0000 A23 S ## 97 0 0 PC 17754 34.6542 A5 C ## 494 0 0 PC 17609 49.5042 C ## 746 1 1 WE/P 5735 71.0000 B22 S ## 55 0 1 113509 61.9792 B30 C ## 457 0 0 13509 26.5500 E38 S 4.1.4 Hands-on Exercises 4.2 Data Manipulation with Dplyr 4.2.1 Introduction to Dplyr package Dplyr is a package designed for data manipulation equipped with a set of intuitive functions to perform tasks like filtering rows, selecting columns, rearranging data and summarizing information. The package is part of a larger library, tidyverse. The tidyverse package is a package designed for data science that share an underlying design philosophy, grammar and data structures. The packages within the tidyverse are widely used for data manipulation, exploration, and visualization in R. Here are some of the core packages in tidyverse; ggplot2 dplyr tidyr readr purrr tibble The tidyverse package is installed by install.packages(&quot;tidyverse&quot;) To invoke the package into the system, the below command is invoked library(tidyverse) ## ── Attaching core tidyverse packages ────── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.3 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.2 ## ── Conflicts ───── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors In this course, we will discuss on dplyr since it is an essential tool in data analysis. If you want to use dplyr alone then it can be installed by; install.packages(&quot;dplyr&quot;) To load the library into the system; library(dplyr) &lt;Introduce the dplyr verbs&gt; 4.2.2 Hands-on Exercises "],["data-visualization.html", "Chapter 5 Data Visualization 5.1 Basic Data Visualization 5.2 Advanced Data Visualization", " Chapter 5 Data Visualization 5.1 Basic Data Visualization 5.2 Advanced Data Visualization "],["explanatory-data-analysis.html", "Chapter 6 Explanatory Data Analysis", " Chapter 6 Explanatory Data Analysis "],["statistical-analysis.html", "Chapter 7 Statistical Analysis 7.1 Basic Concepts 7.2 Correlation and Regression Analysis 7.3 Advanced Statistical Methods", " Chapter 7 Statistical Analysis 7.1 Basic Concepts 7.2 Correlation and Regression Analysis 7.3 Advanced Statistical Methods "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
